/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.38
 * Generated at: 2016-12-22 12:13:43 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.view;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/C:/Users/Praneeth%20Madusanka/Documents/NetBeansProjects/winner/build/web/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153365282000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1482406387349L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("    <head>\n");
      out.write("        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n");
      out.write("        <title>JSP Page</title>\n");
      out.write("\n");
      out.write("        <script src=\"");
      if (_jspx_meth_c_005furl_005f0(_jspx_page_context))
        return;
      out.write("\"></script>\n");
      out.write("        <script src=\"");
      if (_jspx_meth_c_005furl_005f1(_jspx_page_context))
        return;
      out.write("\"></script>\n");
      out.write("        <script>\n");
      out.write("            function myHero() {\n");
      out.write("                var duration = 10000;\n");
      out.write("                var durationTwo = 17000;\n");
      out.write("                var interval = 100;\n");
      out.write("                var intervalTimer;\n");
      out.write("                var intervalTimerTwo;\n");
      out.write("\n");
      out.write("                intervalTimer = setInterval(function () {\n");
      out.write("                    var number = 1000 + Math.floor(Math.random() * 1000);\n");
      out.write("                    var modnum = number % 7;\n");
      out.write("                    $('#my_number').text(modnum + 1);\n");
      out.write("\n");
      out.write("                    var x = modnum + 1;\n");
      out.write("                    $.ajax({\n");
      out.write("                        type: 'POST',\n");
      out.write("                        url: '/winner/getuploadfiledataByuserId',\n");
      out.write("                        data: JSON.stringify(x),\n");
      out.write("                        contentType: 'application/json; charset=utf-8',\n");
      out.write("                        dataType: 'json',\n");
      out.write("                        success: function (data, textStatus, jqXHR) {\n");
      out.write("//                        alert(JSON.stringify(data));\n");
      out.write("                            $('#userroledatatable').html(\"<p>\" + data.username + \"</p>\");\n");
      out.write("                        },\n");
      out.write("                        error: function (jqXHR, textStatus, errorThrown) {\n");
      out.write("                            $('#userroledatatable').html(\"<tr><td colspan='5'class='text-center' style='color:red'>System Error.</td></tr>\");\n");
      out.write("                        }\n");
      out.write("                    });\n");
      out.write("                }, interval);\n");
      out.write("\n");
      out.write("                intervalTimerTwo = setInterval(function () {\n");
      out.write("                    var numberTwo = 1000 + Math.floor(Math.random() * 1000);\n");
      out.write("                    var modnumTwo = numberTwo % 3;\n");
      out.write("\n");
      out.write("                    var y = modnumTwo + 1;\n");
      out.write("                    $.ajax({\n");
      out.write("                        type: 'POST',\n");
      out.write("                        url: '/winner/getGametypeById',\n");
      out.write("                        data: JSON.stringify(y),\n");
      out.write("                        contentType: 'application/json; charset=utf-8',\n");
      out.write("                        dataType: 'json',\n");
      out.write("                        success: function (data, textStatus, jqXHR) {\n");
      out.write("//                        alert(JSON.stringify(data));\n");
      out.write("                            $('#my_numbertwo').html(\"<p>\" + data.gametype + \"</p>\");\n");
      out.write("                        },\n");
      out.write("                        error: function (jqXHR, textStatus, errorThrown) {\n");
      out.write("                            $('#my_numbertwo').html(\"<tr><td colspan='5'class='text-center' style='color:red'>System Error.</td></tr>\");\n");
      out.write("                        }\n");
      out.write("                    });\n");
      out.write("                }, interval);\n");
      out.write("\n");
      out.write("                setTimeout(function () {\n");
      out.write("                    clearInterval(intervalTimer);\n");
      out.write("                }, duration);\n");
      out.write("\n");
      out.write("                setTimeout(function () {\n");
      out.write("                    clearInterval(intervalTimerTwo);\n");
      out.write("                }, durationTwo);\n");
      out.write("            }\n");
      out.write("        </script>\n");
      out.write("        <style>\n");
      out.write("            * { margin: 0; padding: 0; }\n");
      out.write("\n");
      out.write("            html, body { height: 100%; }\n");
      out.write("\n");
      out.write("            body {\n");
      out.write("                background: #000;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            canvas {\n");
      out.write("                display: block;\n");
      out.write("                cursor: crosshair;\n");
      out.write("            }\n");
      out.write("        </style>\n");
      out.write("\n");
      out.write("    </head>\n");
      out.write("\n");
      out.write("    <body>\n");
      out.write("        <div class=\"container\">\n");
      out.write("            <div class=\"row\" style=\"position: absolute;padding-top: 100px;\">   \n");
      out.write("                <div style=\"min-height: 10em;vertical-align: middle;text-align: center;width: 1500px\">\n");
      out.write("                    \n");
      out.write("\n");
      out.write("                    <div style=\"text-align: center;padding-top: 50px;\">\n");
      out.write("                        <h1 style=\"font-size: 80px;color: red;\" id=\"userroledatatable\"></h1>\n");
      out.write("                    </div>  \n");
      out.write("\n");
      out.write("                    <div style=\"text-align: center;padding-top: 100px;\">\n");
      out.write("                        <h1 style=\"font-size: 60px;color: greenyellow;\" id=\"my_numbertwo\"></h1>\n");
      out.write("                    </div>\n");
      out.write("\n");
      out.write("                </div>\n");
      out.write("            </div>\n");
      out.write("        </div>\n");
      out.write("        \n");
      out.write("        <div style=\"position: fixed;bottom: 30px;right: 50px;color: yellow\">\n");
      out.write("            <input type=\"button\" onclick=\"myHero();\" value=\"submit\"/>\n");
      out.write("        </div>\n");
      out.write("        \n");
      out.write("        <div style=\"position: fixed;bottom: 30px;left: 50px;color: yellow\">\n");
      out.write("            <img src=\"");
      if (_jspx_meth_c_005furl_005f2(_jspx_page_context))
        return;
      out.write("\" width=\"300px\">\n");
      out.write("        </div>\n");
      out.write("        \n");
      out.write("        <canvas id=\"canvas\">Canvas is not supported by your browser.</canvas>\n");
      out.write("        <!--        <input type=\"button\" onclick=\"myHero();\" value=\"submit\"/>\n");
      out.write("                <div id=\"userroledatatable\"></div>\n");
      out.write("                <p id=\"my_number\"></p> \n");
      out.write("                <p id=\"my_numbertwo\"></p>-->\n");
      out.write("\n");
      out.write("    </body>\n");
      out.write("\n");
      out.write("    <script>\n");
      out.write("        $(document).ready(function () {\n");
      out.write("            // Options\n");
      out.write("            var options = {\n");
      out.write("                /* Which hue should be used for the first batch of rockets? */\n");
      out.write("                startingHue: 120,\n");
      out.write("                /* How many ticks the script should wait before a new firework gets spawned, if the user is holding down his mouse button. */\n");
      out.write("                clickLimiter: 5,\n");
      out.write("                /* How fast the rockets should automatically spawn, based on ticks */\n");
      out.write("                timerInterval: 10,\n");
      out.write("                /* Show pulsing circles marking the targets? */\n");
      out.write("                showTargets: true,\n");
      out.write("                /* Rocket movement options, should be self-explanatory */\n");
      out.write("                rocketSpeed: 2,\n");
      out.write("                rocketAcceleration: 1.03,\n");
      out.write("                /* Particle movement options, should be self-explanatory */\n");
      out.write("                particleFriction: 0.95,\n");
      out.write("                particleGravity: 1,\n");
      out.write("                /* Minimum and maximum amount of particle spawns per rocket */\n");
      out.write("                particleMinCount: 25,\n");
      out.write("                particleMaxCount: 40,\n");
      out.write("                /* Minimum and maximum radius of a particle */\n");
      out.write("                particleMinRadius: 6,\n");
      out.write("                particleMaxRadius: 8\n");
      out.write("            };\n");
      out.write("\n");
      out.write("// Local variables\n");
      out.write("            var fireworks = [];\n");
      out.write("            var particles = [];\n");
      out.write("            var mouse = {down: false, x: 0, y: 0};\n");
      out.write("            var currentHue = options.startingHue;\n");
      out.write("            var clickLimiterTick = 0;\n");
      out.write("            var timerTick = 0;\n");
      out.write("            var cntRocketsLaunched = 0;\n");
      out.write("\n");
      out.write("// Helper function for canvas animations\n");
      out.write("            window.requestAnimFrame = (function () {\n");
      out.write("                return window.requestAnimationFrame ||\n");
      out.write("                        window.webkitRequestAnimationFrame ||\n");
      out.write("                        window.mozRequestAnimationFrame ||\n");
      out.write("                        function (cb) {\n");
      out.write("                            window.setTimeout(callback, 1000 / 60);\n");
      out.write("                        }\n");
      out.write("            })();\n");
      out.write("\n");
      out.write("// Helper function to return random numbers within a specified range\n");
      out.write("            function random(min, max) {\n");
      out.write("                return Math.random() * (max - min) + min;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("// Helper function to calculate the distance between 2 points\n");
      out.write("            function calculateDistance(p1x, p1y, p2x, p2y) {\n");
      out.write("                var xDistance = p1x - p2x;\n");
      out.write("                var yDistance = p1y - p2y;\n");
      out.write("                return Math.sqrt(Math.pow(xDistance, 2) + Math.pow(yDistance, 2));\n");
      out.write("            }\n");
      out.write("\n");
      out.write("// Setup some basic variables\n");
      out.write("            var canvas = document.getElementById('canvas');\n");
      out.write("            var canvasCtx = canvas.getContext('2d');\n");
      out.write("            var canvasWidth = window.innerWidth;\n");
      out.write("            var canvasHeight = window.innerHeight;\n");
      out.write("\n");
      out.write("// Resize canvas\n");
      out.write("            canvas.width = canvasWidth;\n");
      out.write("            canvas.height = canvasHeight;\n");
      out.write("\n");
      out.write("// Firework class\n");
      out.write("            function Firework(sx, sy, tx, ty) {\n");
      out.write("                // Set coordinates (x/y = actual, sx/sy = starting, tx/ty = target)\n");
      out.write("                this.x = this.sx = sx;\n");
      out.write("                this.y = this.sy = sy;\n");
      out.write("                this.tx = tx;\n");
      out.write("                this.ty = ty;\n");
      out.write("\n");
      out.write("                // Calculate distance between starting and target point\n");
      out.write("                this.distanceToTarget = calculateDistance(sx, sy, tx, ty);\n");
      out.write("                this.distanceTraveled = 0;\n");
      out.write("\n");
      out.write("                // To simulate a trail effect, the last few coordinates will be stored\n");
      out.write("                this.coordinates = [];\n");
      out.write("                this.coordinateCount = 3;\n");
      out.write("\n");
      out.write("                // Populate coordinate array with initial data\n");
      out.write("                while (this.coordinateCount--) {\n");
      out.write("                    this.coordinates.push([this.x, this.y]);\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                // Some settings, you can adjust them if you'd like to do so.\n");
      out.write("                this.angle = Math.atan2(ty - sy, tx - sx);\n");
      out.write("                this.speed = options.rocketSpeed;\n");
      out.write("                this.acceleration = options.rocketAcceleration;\n");
      out.write("                this.brightness = random(50, 80);\n");
      out.write("                this.hue = currentHue;\n");
      out.write("                this.targetRadius = 1;\n");
      out.write("                this.targetDirection = false;  // false = Radius is getting bigger, true = Radius is getting smaller\n");
      out.write("\n");
      out.write("                // Increase the rockets launched counter\n");
      out.write("                cntRocketsLaunched++;\n");
      out.write("            }\n");
      out.write("            ;\n");
      out.write("\n");
      out.write("// This method should be called each frame to update the firework\n");
      out.write("            Firework.prototype.update = function (index) {\n");
      out.write("                // Update the coordinates array\n");
      out.write("                this.coordinates.pop();\n");
      out.write("                this.coordinates.unshift([this.x, this.y]);\n");
      out.write("\n");
      out.write("                // Cycle the target radius (used for the pulsing target circle)\n");
      out.write("                if (!this.targetDirection) {\n");
      out.write("                    if (this.targetRadius < 8)\n");
      out.write("                        this.targetRadius += 0.15;\n");
      out.write("                    else\n");
      out.write("                        this.targetDirection = true;\n");
      out.write("                } else {\n");
      out.write("                    if (this.targetRadius > 1)\n");
      out.write("                        this.targetRadius -= 0.15;\n");
      out.write("                    else\n");
      out.write("                        this.targetDirection = false;\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                // Speed up the firework (could possibly travel faster than the speed of light) \n");
      out.write("                this.speed *= this.acceleration;\n");
      out.write("\n");
      out.write("                // Calculate the distance the firework has travelled so far (based on velocities)\n");
      out.write("                var vx = Math.cos(this.angle) * this.speed;\n");
      out.write("                var vy = Math.sin(this.angle) * this.speed;\n");
      out.write("                this.distanceTraveled = calculateDistance(this.sx, this.sy, this.x + vx, this.y + vy);\n");
      out.write("\n");
      out.write("                // If the distance traveled (including velocities) is greater than the initial distance\n");
      out.write("                // to the target, then the target has been reached. If that's not the case, keep traveling.\n");
      out.write("                if (this.distanceTraveled >= this.distanceToTarget) {\n");
      out.write("                    createParticles(this.tx, this.ty);\n");
      out.write("                    fireworks.splice(index, 1);\n");
      out.write("                } else {\n");
      out.write("                    this.x += vx;\n");
      out.write("                    this.y += vy;\n");
      out.write("                }\n");
      out.write("            };\n");
      out.write("\n");
      out.write("// Draws the firework\n");
      out.write("            Firework.prototype.draw = function () {\n");
      out.write("                var lastCoordinate = this.coordinates[this.coordinates.length - 1];\n");
      out.write("\n");
      out.write("                // Draw the rocket\n");
      out.write("                canvasCtx.beginPath();\n");
      out.write("                canvasCtx.moveTo(lastCoordinate[0], lastCoordinate[1]);\n");
      out.write("                canvasCtx.lineTo(this.x, this.y);\n");
      out.write("                canvasCtx.strokeStyle = 'hsl(' + this.hue + ',100%,' + this.brightness + '%)';\n");
      out.write("                canvasCtx.stroke();\n");
      out.write("\n");
      out.write("                // Draw the target (pulsing circle)\n");
      out.write("                if (options.showTargets) {\n");
      out.write("                    canvasCtx.beginPath();\n");
      out.write("                    canvasCtx.arc(this.tx, this.ty, this.targetRadius, 0, Math.PI * 2);\n");
      out.write("                    canvasCtx.stroke();\n");
      out.write("                }\n");
      out.write("            };\n");
      out.write("\n");
      out.write("// Particle class\n");
      out.write("            function Particle(x, y) {\n");
      out.write("                // Set the starting point\n");
      out.write("                this.x = x;\n");
      out.write("                this.y = y;\n");
      out.write("\n");
      out.write("                // To simulate a trail effect, the last few coordinates will be stored\n");
      out.write("                this.coordinates = [];\n");
      out.write("                this.coordinateCount = 5;\n");
      out.write("\n");
      out.write("                // Populate coordinate array with initial data\n");
      out.write("                while (this.coordinateCount--) {\n");
      out.write("                    this.coordinates.push([this.x, this.y]);\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                // Set a random angle in all possible directions (radians)\n");
      out.write("                this.angle = random(0, Math.PI * 2);\n");
      out.write("                this.speed = random(1, 10);\n");
      out.write("\n");
      out.write("                // Add some friction and gravity to the particle\n");
      out.write("                this.friction = options.particleFriction;\n");
      out.write("                this.gravity = options.particleGravity;\n");
      out.write("\n");
      out.write("                // Change the hue to a random number\n");
      out.write("                this.hue = random(currentHue - 20, currentHue + 20);\n");
      out.write("                this.brightness = random(50, 80);\n");
      out.write("                this.alpha = 1;\n");
      out.write("\n");
      out.write("                // Set how fast the particles decay\n");
      out.write("                this.decay = random(0.01, 0.03);\n");
      out.write("            }\n");
      out.write("\n");
      out.write("// Updates the particle, should be called each frame\n");
      out.write("            Particle.prototype.update = function (index) {\n");
      out.write("                // Update the coordinates array\n");
      out.write("                this.coordinates.pop();\n");
      out.write("                this.coordinates.unshift([this.x, this.y]);\n");
      out.write("\n");
      out.write("                // Slow it down (based on friction)\n");
      out.write("                this.speed *= this.friction;\n");
      out.write("\n");
      out.write("                // Apply velocity to the particle\n");
      out.write("                this.x += Math.cos(this.angle) * this.speed;\n");
      out.write("                this.y += Math.sin(this.angle) * this.speed + this.gravity;\n");
      out.write("\n");
      out.write("                // Fade out the particle, and remove it if alpha is low enough\n");
      out.write("                this.alpha -= this.decay;\n");
      out.write("                if (this.alpha <= this.decay) {\n");
      out.write("                    particles.splice(index, 1);\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("\n");
      out.write("// Draws the particle\n");
      out.write("            Particle.prototype.draw = function () {\n");
      out.write("                var lastCoordinate = this.coordinates[this.coordinates.length - 1];\n");
      out.write("                var radius = Math.round(random(options.particleMinRadius, options.particleMaxRadius));\n");
      out.write("\n");
      out.write("                // Create a new shiny gradient\n");
      out.write("                var gradient = canvasCtx.createRadialGradient(this.x, this.y, 0, this.x, this.y, radius);\n");
      out.write("                gradient.addColorStop(0.0, 'white');\n");
      out.write("                gradient.addColorStop(0.1, 'white');\n");
      out.write("                gradient.addColorStop(0.1, 'hsla(' + this.hue + ',100%,' + this.brightness + '%,' + this.alpha + ')');\n");
      out.write("                gradient.addColorStop(1.0, 'black');\n");
      out.write("\n");
      out.write("                // Draw the gradient\n");
      out.write("                canvasCtx.beginPath();\n");
      out.write("                canvasCtx.fillStyle = gradient;\n");
      out.write("                canvasCtx.arc(this.x, this.y, radius, Math.PI * 2, false);\n");
      out.write("                canvasCtx.fill();\n");
      out.write("            }\n");
      out.write("\n");
      out.write("// Create a bunch of particles at the given position\n");
      out.write("            function createParticles(x, y) {\n");
      out.write("                var particleCount = Math.round(random(options.particleMinCount, options.particleMaxCount));\n");
      out.write("                while (particleCount--) {\n");
      out.write("                    particles.push(new Particle(x, y));\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("\n");
      out.write("// Add an event listener to the window so we're able to react to size changes\n");
      out.write("            window.addEventListener('resize', function (e) {\n");
      out.write("                canvas.width = canvasWidth = window.innerWidth;\n");
      out.write("                canvas.height = canvasHeight = window.innerHeight;\n");
      out.write("            });\n");
      out.write("\n");
      out.write("// Add event listeners to the canvas to handle mouse interactions\n");
      out.write("            canvas.addEventListener('mousemove', function (e) {\n");
      out.write("                e.preventDefault();\n");
      out.write("                mouse.x = e.pageX - canvas.offsetLeft;\n");
      out.write("                mouse.y = e.pageY - canvas.offsetTop;\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            canvas.addEventListener('mousedown', function (e) {\n");
      out.write("                e.preventDefault();\n");
      out.write("                mouse.down = true;\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            canvas.addEventListener('mouseup', function (e) {\n");
      out.write("                e.preventDefault();\n");
      out.write("                mouse.down = false;\n");
      out.write("            });\n");
      out.write("\n");
      out.write("// Main application / script, called when the window is loaded\n");
      out.write("            function gameLoop() {\n");
      out.write("                // This function will rund endlessly by using requestAnimationFrame (or fallback to setInterval)\n");
      out.write("                requestAnimFrame(gameLoop);\n");
      out.write("\n");
      out.write("                // Increase the hue to get different colored fireworks over time\n");
      out.write("                currentHue += 0.5;\n");
      out.write("\n");
      out.write("                // 'Clear' the canvas at a specific opacity, by using 'destination-out'. This will create a trailing effect.\n");
      out.write("                canvasCtx.globalCompositeOperation = 'destination-out';\n");
      out.write("                canvasCtx.fillStyle = 'rgba(0, 0, 0, 0.5)';\n");
      out.write("                canvasCtx.fillRect(0, 0, canvasWidth, canvasHeight);\n");
      out.write("                canvasCtx.globalCompositeOperation = 'lighter';\n");
      out.write("\n");
      out.write("                // Loop over all existing fireworks (they should be updated & drawn)\n");
      out.write("                var i = fireworks.length;\n");
      out.write("                while (i--) {\n");
      out.write("                    fireworks[i].draw();\n");
      out.write("                    fireworks[i].update(i);\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                // Loop over all existing particles (they should be updated & drawn)\n");
      out.write("                var i = particles.length;\n");
      out.write("                while (i--) {\n");
      out.write("                    particles[i].draw();\n");
      out.write("                    particles[i].update(i);\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                // Draw some text\n");
      out.write("                canvasCtx.fillStyle = 'yellow';\n");
      out.write("                canvasCtx.font = '35px Arial';\n");
      out.write("                canvasCtx.fillText('Random Name-Challange Generator' + 0, 50, 50);\n");
      out.write("//                canvasCtx.fillText('<input type=\"button\" onclick=\"myHero();\" value=\"submit\"/>');\n");
      out.write("\n");
      out.write("                // Launch fireworks automatically to random coordinates, if the user does not interact with the scene\n");
      out.write("                if (timerTick >= options.timerInterval) {\n");
      out.write("                    if (!mouse.down) {\n");
      out.write("                        fireworks.push(new Firework(canvasWidth / 2, canvasHeight, random(0, canvasWidth), random(0, canvasHeight / 2)));\n");
      out.write("                        timerTick = 0;\n");
      out.write("                    }\n");
      out.write("                } else {\n");
      out.write("                    timerTick++;\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                // Limit the rate at which fireworks can be spawned by mouse\n");
      out.write("                if (clickLimiterTick >= options.clickLimiter) {\n");
      out.write("                    if (mouse.down) {\n");
      out.write("                        fireworks.push(new Firework(canvasWidth / 2, canvasHeight, mouse.x, mouse.y));\n");
      out.write("                        clickLimiterTick = 0;\n");
      out.write("                    }\n");
      out.write("                } else {\n");
      out.write("                    clickLimiterTick++;\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            window.onload = gameLoop();\n");
      out.write("        });\n");
      out.write("    </script>\n");
      out.write("\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005furl_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:url
    org.apache.taglibs.standard.tag.rt.core.UrlTag _jspx_th_c_005furl_005f0 = (org.apache.taglibs.standard.tag.rt.core.UrlTag) _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.UrlTag.class);
    try {
      _jspx_th_c_005furl_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005furl_005f0.setParent(null);
      // /WEB-INF/view/index.jsp(14,21) name = value type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005furl_005f0.setValue("/assets/js/jquery-3.1.1.js");
      int _jspx_eval_c_005furl_005f0 = _jspx_th_c_005furl_005f0.doStartTag();
      if (_jspx_th_c_005furl_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } finally {
      _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005furl_005f0);
    }
    return false;
  }

  private boolean _jspx_meth_c_005furl_005f1(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:url
    org.apache.taglibs.standard.tag.rt.core.UrlTag _jspx_th_c_005furl_005f1 = (org.apache.taglibs.standard.tag.rt.core.UrlTag) _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.UrlTag.class);
    try {
      _jspx_th_c_005furl_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005furl_005f1.setParent(null);
      // /WEB-INF/view/index.jsp(15,21) name = value type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005furl_005f1.setValue("/assets/js/bootstrap.js");
      int _jspx_eval_c_005furl_005f1 = _jspx_th_c_005furl_005f1.doStartTag();
      if (_jspx_th_c_005furl_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } finally {
      _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005furl_005f1);
    }
    return false;
  }

  private boolean _jspx_meth_c_005furl_005f2(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:url
    org.apache.taglibs.standard.tag.rt.core.UrlTag _jspx_th_c_005furl_005f2 = (org.apache.taglibs.standard.tag.rt.core.UrlTag) _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.UrlTag.class);
    try {
      _jspx_th_c_005furl_005f2.setPageContext(_jspx_page_context);
      _jspx_th_c_005furl_005f2.setParent(null);
      // /WEB-INF/view/index.jsp(116,22) name = value type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005furl_005f2.setValue("/assets/img/img.jpg");
      int _jspx_eval_c_005furl_005f2 = _jspx_th_c_005furl_005f2.doStartTag();
      if (_jspx_th_c_005furl_005f2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
    } finally {
      _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005furl_005f2);
    }
    return false;
  }
}
